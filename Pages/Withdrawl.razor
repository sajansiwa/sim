@page "/withdrawlItem"


<h3 class="withdrawnPageTitle">Withdraw Items</h3>  


<table class="table"> 
    <thead >
        <tr>
            <th>item name</th>
            <th>quantity</th>
            <th>taken by</th>
            <th>date taken out</th>
        </tr>
    </thead>

    <tbody class="withdrawnTableRows"> 
        @foreach (var withdrawlItem in _withdrawlItems)
        {
            <tr>
                <td>@withdrawlItem.ItemName</td>
                <td>@withdrawlItem.Quantity.ToString()</td>
                <td>@withdrawlItem.TakerName</td>
                <td>
                    <p class="small mb-0">
                        @withdrawlItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                    </p>
                </td>
                <td>
                    <button class="aprove" @onclick="()=>OpenApproveItemDialog(withdrawlItem)" type=" button">
                       
                        @*<span class="oi oi-check" />*@ Approve
                    </button>
                 </td><td>
                    <button class="reject" @onclick="()=>OpenRejectItemDialog(withdrawlItem)" type=" button">
                       
                        @*<span class="oi oi-check" />*@ Reject
                    </button>
                 </td>


            </tr>
        }
    </tbody>


</table>


@if (_showApproveItemDialog)
{
    <ModalDialog Title="Approve Item" OnClose="@OnApproveItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to approve this withdrawal?</p>
        @if (!string.IsNullOrEmpty(_deleteUserErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteUserErrorMessage" />
        }
    </ModalDialog>
}
@if (_showRejectItemDialog)
{
    <ModalDialog Title="Reject Item" OnClose="@OnRejectItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to reject this withdrawal?</p>
        @if (!string.IsNullOrEmpty(_deleteUserErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteUserErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]

    private GlobalState _globalState { get; set; }
    private List<WithdrawlItem> _withdrawlItems { get; set; }
    private bool _showAddItemDialog { get; set; }
    private bool _showApproveItemDialog { get; set; }
    private bool _showRejectItemDialog { get; set; }
    private string _addUserErrorMessage { get; set; }
    private string _deleteUserErrorMessage { get; set; }
    private User _deleteUser { get; set; }
    private List<User> _users { get; set; }
    private string _itemName { get; set; }
    private int _quantity { get; set; }


    private List<ApprovedItem> _approvedItems { get; set; }
    private List<InventoryItems> _inventoryItems { get; set; }
    private WithdrawlItem _withdrawlModel { get; set; }
    private InventoryItems _inventoryModel { get; set; }
    private WithdrawlItem _deleteInventoryItem { get; set; }




    protected override void OnInitialized()
    {
        _withdrawlItems = WithdrawlService.GetAll(_globalState.CurrentUser.Id);
        _approvedItems = ApprovedItemService.GetAll(_globalState.CurrentUser.Id);
        _inventoryItems = InventoryService.GetAll();
    }


    private void OpenApproveItemDialog(WithdrawlItem withdrawlItem)
    {

        _showApproveItemDialog = true;
        _withdrawlModel = withdrawlItem;
        Console.WriteLine("The dialog box should be shown here");

    }


    private void OpenRejectItemDialog(WithdrawlItem withdrawlItem)
    {
        _showRejectItemDialog = true;
        _withdrawlModel = withdrawlItem;
    }

    private void OnRejectItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showRejectItemDialog = false;
        }
        else
        {
            _inventoryItems = InventoryService.RejectWithdrawItem(_globalState.CurrentUser.Id,_withdrawlModel.ItemId, _withdrawlModel.ItemName, _withdrawlModel.Quantity);
            _withdrawlItems = WithdrawlService.Delete(_withdrawlModel.ItemId, _withdrawlModel.Id);
            _showRejectItemDialog = false;
        }
    }



    private void OnApproveItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showApproveItemDialog = false;
        }
        else
        {
            try
            {
                if (_withdrawlModel.ItemId == Guid.Empty)
                {
                    throw new Exception("Item not found");
                }
                else
                {
                    _approvedItems = ApprovedItemService.Create(_withdrawlModel.TakenBy, _withdrawlModel.ItemName, _withdrawlModel.ItemId,
                    _withdrawlModel.Quantity, _withdrawlModel.TakerName, _globalState.CurrentUser.Id,
                    _globalState.CurrentUser.Username, true);
                    _showApproveItemDialog = false;
                }

                _withdrawlItems = WithdrawlService.Delete(_globalState.CurrentUser.Id,_withdrawlModel.Id);
            }
            catch (Exception e)
            {
                _addUserErrorMessage = e.Message;
            }
        }
    }

}
